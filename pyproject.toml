[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pymitter"
description = "Python port of the extended Node.js EventEmitter 2 approach providing namespaces, wildcards and TTL."
readme = "README.md"
authors = [
    {name = "Marcel Rieger", email = "github.riga@icloud.com"},
]
keywords = [
    "event",
    "emitter",
    "eventemitter",
    "wildcard",
    "node",
    "nodejs",
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
]
license = "BSD-3-Clause"
license-files = ["LICENSE"]
requires-python = ">=3.9"
dynamic = ["version"]
dependencies = []

[dependency-groups]
dev = [
    "flake8~=7.3.0",
    "flake8-commas~=4.0.0",
    "flake8-quotes~=3.4.0",
    "types-docutils~=0.21.0",
    "pytest-cov~=6.2.1",
    "mypy~=1.16.1",
    "typing-extensions~=4.14.1",
]
docs = [
    "autodocsumm~=0.2.14",
    "myst-parser~=4.0.1",
    "sphinx~=8.2.3",
    "sphinx-autodoc-typehints~=3.2.0",
    "sphinx-book-theme~=1.1.4",
    "sphinx-lfs-content~=1.1.10",
    "typing-extensions~=4.14.1",

]

[project.urls]
Homepage = "https://github.com/riga/pymitter"
Documentation = "https://pymitter.readthedocs.io"
Repository = "https://github.com/riga/pymitter.git"
"Bug Tracker" = "https://github.com/riga/pymitter/issues"
Changelog = "https://github.com/riga/pymitter/releases"

[tool.hatch]
version.path = "src/pymitter/__init__.py"
metadata.allow-direct-references = true

[tool.mypy]
disable_error_code = ["no-redef", "valid-type", "method-assign"]
exclude = ["docs", "build"]
files = ["src"]
python_version = "3.12"
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = false
ignore_missing_imports = true

[tool.ruff]
line-length = 120

[tool.ruff.lint]
preview = true
ignore = [
    "PLR",  # Design related pylint codes
    "E501",  # Line too long
    "I002",  # isort: "from __future__ import annotations"
    "ISC001",  # flake8-implicit-str-concat: Implicit string concatenation"
    "PLW2901",  # ignore reassingment of loop variable
    "E731",  # Do not assign a lambda expression, use a def
    "EM101",  # Do not use literal strings in exception messages
    "EM102",  # Do not use f-string in exception messages
    "RUF100",  # Unused "noqa" directive
    "PLC0415",  # `import` should be at the top-level of a file
    "PLW3201",  # Dunder method `...` has no special meaning in Python 3
    "RUF052",  # Local dummy variable `...` is accessed
    "RUF017",  # quadratic list summation
]
select = [
    "E",
    "F",
    "W",  # flake8
    "B",  # flake8-bugbear
    "I",  # isort
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "G",  # flake8-logging-format
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "RET",  # flake8-return
    "RUF",  # Ruff-specific
    "SIM",  # flake8-simplify
    "UP",  # pyupgrade
    "YTT",  # flake8-2020
    "EXE",  # flake8-executable
    "E303",  # Too many blank lines
]
unfixable = [
    "F841",  # Would remove unused variables
]
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]
